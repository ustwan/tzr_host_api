"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞ —Å auto-reconnect
"""
import asyncio
import json
import random
from typing import Callable, Awaitable, Optional
import websockets
from websockets.client import WebSocketClientProtocol

from ..domain.dto import JobMessage, ResultMessage
from ..ports.websocket_client import WebSocketClient
from shared.utils.logger import setup_logger


logger = setup_logger(__name__)


class WsClientImpl(WebSocketClient):
    """
    WebSocket –∫–ª–∏–µ–Ω—Ç –∫ —Å–∞–π—Ç—É —Å:
    - JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    - Auto-reconnect —Å exponential backoff
    - Ping/pong keepalive
    - Graceful disconnect
    """
    
    def __init__(
        self,
        ws_url: str,
        auth_jwt: str,
        ping_interval: float = 20.0,
        reconnect_backoff_min: float = 3.0,
        reconnect_backoff_max: float = 30.0
    ):
        """
        Args:
            ws_url: WSS URL —Å–∞–π—Ç–∞ (wss://site.example.com/ws/pull)
            auth_jwt: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            ping_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª ping –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            reconnect_backoff_min: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backoff –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            reconnect_backoff_max: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π backoff –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        """
        self._ws_url = ws_url
        self._auth_jwt = auth_jwt
        self._ping_interval = ping_interval
        self._backoff_min = reconnect_backoff_min
        self._backoff_max = reconnect_backoff_max
        
        self._ws: Optional[WebSocketClientProtocol] = None
        self._current_backoff = reconnect_backoff_min
        self._is_connected = False
        self._should_stop = False
    
    async def connect(self) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        """
        try:
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self._ws_url}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º JWT –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
            headers = {
                "Authorization": f"Bearer {self._auth_jwt}"
            }
            
            self._ws = await websockets.connect(
                self._ws_url,
                extra_headers=headers,
                ping_interval=self._ping_interval,
                ping_timeout=self._ping_interval * 2,
                close_timeout=10
            )
            
            self._is_connected = True
            self._current_backoff = self._backoff_min  # –°–±—Ä–æ—Å backoff –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            
            logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        except Exception as e:
            self._is_connected = False
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise ConnectionError(f"WebSocket connection failed: {e}")
    
    async def disconnect(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self._ws and not self._ws.closed:
            logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket...")
            await self._ws.close()
            self._is_connected = False
            logger.info("WebSocket –∑–∞–∫—Ä—ã—Ç")
    
    async def send_result(self, result: ResultMessage) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
        """
        if not self._ws or self._ws.closed:
            raise ConnectionError("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dataclass –≤ dict
        result_dict = {
            "type": result.type,
            "id": result.id,
            "ok": result.ok,
            "result": result.result,
            "error": result.error,
            "ts": result.ts,
            "nonce": result.nonce,
            "sig": result.sig
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
        message = json.dumps(result_dict, ensure_ascii=False)
        await self._ws.send(message)
        
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ {result.id}")
    
    async def receive_job(self) -> Optional[JobMessage]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –æ—Ç —Å–∞–π—Ç–∞
        
        Returns:
            JobMessage –∏–ª–∏ None –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç/–æ—à–∏–±–∫–∞
        """
        if not self._ws or self._ws.closed:
            return None
        
        try:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            message = await asyncio.wait_for(self._ws.recv(), timeout=60.0)
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(message)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if data.get("type") != "job":
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {data.get('type')}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º JobMessage
            job = JobMessage(
                type="job",
                id=data["id"],
                job_type=data["job_type"],
                payload=data["payload"],
                ts=data["ts"],
                nonce=data["nonce"],
                sig=data["sig"]
            )
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {job.job_type} (id={job.id})")
            return job
        
        except asyncio.TimeoutError:
            # –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞—á
            return None
        
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    async def run(
        self,
        on_job: Callable[[JobMessage], Awaitable[ResultMessage]],
        reconnect: bool = True
    ) -> None:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á —Å auto-reconnect
        
        Args:
            on_job: Async callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
            reconnect: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ WebSocket –∞–≥–µ–Ω—Ç–∞...")
        
        while not self._should_stop:
            try:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                await self.connect()
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
                while self._is_connected and not self._should_stop:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
                    job = await self.receive_job()
                    
                    if job is None:
                        # –ù–µ—Ç –∑–∞–¥–∞—á - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                    try:
                        result = await on_job(job)
                        await self.send_result(result)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {job.id}: {e}")
            
            except ConnectionError as e:
                logger.error(f"–†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                self._is_connected = False
                
                if not reconnect or self._should_stop:
                    break
                
                # Exponential backoff —Å jitter
                jitter = random.uniform(0, self._current_backoff * 0.3)
                wait_time = min(self._current_backoff + jitter, self._backoff_max)
                
                logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time:.1f}s...")
                await asyncio.sleep(wait_time)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º backoff
                self._current_backoff = min(self._current_backoff * 2, self._backoff_max)
            
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                
                if not reconnect or self._should_stop:
                    break
                
                await asyncio.sleep(self._backoff_min)
        
        # Graceful shutdown
        await self.disconnect()
        logger.info("WebSocket –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è graceful shutdown)"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞...")
        self._should_stop = True
        await self.disconnect()

