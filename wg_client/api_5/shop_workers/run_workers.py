"""–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö 3 shop workers"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å app –≤ –ø—É—Ç—å
app_path = Path(__file__).parent.parent
sys.path.insert(0, str(app_path))

from app.config import config
from shop_workers.worker_base import run_worker


async def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    print("=" * 60)
    print("ü§ñ Shop Workers - –ó–∞–ø—É—Å–∫")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–æ–≤
    bots = config.get_bots_config()
    
    # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    tasks = []
    for shop_code, bot_config in bots.items():
        if not bot_config.enabled:
            print(f"‚ö† {shop_code.upper()}: –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            continue
        
        if not bot_config.login_key:
            print(f"‚ùå {shop_code.upper()}: LOGIN_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            continue
        
        task = asyncio.create_task(
            run_worker(shop_code, bot_config.login, bot_config.login_key)
        )
        tasks.append(task)
        print(f"‚úì {shop_code.upper()}: –≤–æ—Ä–∫–µ—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω")
    
    if not tasks:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")
        return
    
    print("=" * 60)
    print(f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
    try:
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        print("\n‚ö† –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        for task in tasks:
            task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
        print("‚úì –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass


