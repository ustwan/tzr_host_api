"""–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –≤–æ—Ä–∫–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
import asyncio
import time
from datetime import datetime
from typing import Optional

from app.config import config
from app.infrastructure.game_socket_client import GameSocketClient
from app.infrastructure.db.database import Database
from app.infrastructure.db.repositories import (
    ShopRepository, ItemTemplateRepository, ShopItemRepository,
    SnapshotRepository, BotSessionRepository
)
from app.usecases.parse_category import ParseCategoryUseCase
from app.usecases.create_snapshot import CreateSnapshotUseCase
from app.domain.entities import BotSession


class ShopWorkerBase:
    """
    –ë–∞–∑–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    
    –ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä:
    1. –õ–æ–≥–∏–Ω–∏—Ç—Å—è –≤ –∏–≥—Ä—É
    2. –ó–∞—Ö–æ–¥–∏—Ç –≤ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω
    3. –ü–∞—Ä—Å–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    4. –°–æ–∑–¥–∞—ë—Ç —Å–Ω–∏–º–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
    5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç keep-alive –ø–∏–Ω–≥–∏
    """
    
    def __init__(self, shop_code: str, bot_login: str, bot_login_key: str):
        self.shop_code = shop_code
        self.bot_login = bot_login
        self.bot_login_key = bot_login_key
        
        # Database
        self.db = Database()
        
        # Game client
        self.client = GameSocketClient(
            host=config.GAME_SERVER_HOST,
            port=config.GAME_SERVER_PORT,
            timeout=config.GAME_SERVER_TIMEOUT
        )
        
        # State
        self.running = False
        self.last_snapshot_time: Optional[datetime] = None
        self.last_keepalive_time: Optional[datetime] = None
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä"""
        self.running = True
        print(f"ü§ñ {self.shop_code.upper()} Worker: –∑–∞–ø—É—â–µ–Ω")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not await self._authenticate():
            print(f"‚ùå {self.shop_code.upper()}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è")
            return
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        while self.running:
            try:
                # Keep-alive –ø–∏–Ω–≥–∏
                await self._send_keepalive()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ (–∫–∞–∂–¥—ã–π —á–∞—Å)
                await self._create_snapshot_if_needed()
                
                # –ü–∞—É–∑–∞
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"‚ùå {self.shop_code.upper()}: –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ - {e}")
                await asyncio.sleep(config.RECONNECT_DELAY)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if not self.client.authenticated:
                    await self._authenticate()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä"""
        self.running = False
        self.client.disconnect()
        self.db.close()
        print(f"‚úì {self.shop_code.upper()} Worker: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞ (–∫–∞–∫ –≤ XML Workers)"""
        print(f"üîê {self.shop_code.upper()}: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        
        success, result = self.client.authenticate(self.bot_login, self.bot_login_key)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –ë–î
            with self.db.get_session() as session:
                bot_repo = BotSessionRepository(session)
                bot_session = BotSession(
                    bot_login=self.bot_login,
                    shop_code=self.shop_code,
                    session_id=result,
                    authenticated=True,
                    last_activity=datetime.utcnow(),
                    location=f"{self.shop_code}_shop"
                )
                bot_repo.upsert(bot_session)
            
            print(f"‚úì {self.shop_code.upper()}: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print(f"‚ùå {self.shop_code.upper()}: –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - {result}")
            return False
    
    async def _send_keepalive(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å keep-alive –ø–∏–Ω–≥"""
        now = datetime.utcnow()
        
        if self.last_keepalive_time is None or \
           (now - self.last_keepalive_time).total_seconds() >= config.KEEPALIVE_INTERVAL:
            
            if self.client.ping():
                self.last_keepalive_time = now
                
                # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
                with self.db.get_session() as session:
                    bot_repo = BotSessionRepository(session)
                    bot_session = bot_repo.get_by_shop(self.shop_code)
                    if bot_session:
                        bot_session.last_activity = now
                        bot_repo.upsert(bot_session)
            else:
                print(f"‚ö† {self.shop_code.upper()}: ping failed, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                await self._authenticate()
    
    async def _create_snapshot_if_needed(self):
        """–°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ –µ—Å–ª–∏ –ø—Ä–æ—à—ë–ª —á–∞—Å"""
        now = datetime.utcnow()
        
        if self.last_snapshot_time is None or \
           (now - self.last_snapshot_time).total_seconds() >= config.SNAPSHOT_INTERVAL:
            
            print(f"üì∏ {self.shop_code.upper()}: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞...")
            
            try:
                with self.db.get_session() as session:
                    shop_repo = ShopRepository(session)
                    template_repo = ItemTemplateRepository(session)
                    item_repo = ShopItemRepository(session)
                    snapshot_repo = SnapshotRepository(session)
                    
                    # Use cases
                    parse_uc = ParseCategoryUseCase(
                        shop_repo, template_repo, item_repo, self.client
                    )
                    snapshot_uc = CreateSnapshotUseCase(
                        shop_repo, snapshot_repo, item_repo, parse_uc
                    )
                    
                    # –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫
                    snapshot = snapshot_uc.execute(
                        shop_code=self.shop_code,
                        worker_name=f"{self.shop_code}_worker"
                    )
                    
                    self.last_snapshot_time = now
                    print(f"‚úì {self.shop_code.upper()}: —Å–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω (ID={snapshot.id}, items={snapshot.items_count})")
                    
            except Exception as e:
                print(f"‚ùå {self.shop_code.upper()}: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ - {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ/–ø–æ—Ç–æ–∫–µ
async def run_worker(shop_code: str, bot_login: str, bot_login_key: str):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä"""
    worker = ShopWorkerBase(shop_code, bot_login, bot_login_key)
    
    try:
        await worker.start()
    except KeyboardInterrupt:
        print(f"\n‚ö† {shop_code.upper()}: –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await worker.stop()


