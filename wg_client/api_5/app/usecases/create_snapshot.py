"""Use Case: –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
from typing import List
from datetime import datetime

from app.domain.entities import Snapshot
from app.infrastructure.db.repositories import ShopRepository, SnapshotRepository, ShopItemRepository
from app.usecases.parse_category import ParseCategoryUseCase
from app.config import config


class CreateSnapshotUseCase:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    - –°–æ–∑–¥–∞–Ω–∏–µ snapshot –∑–∞–ø–∏—Å–∏
    - –ü—Ä–∏–≤—è–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∫ —Å–Ω–∏–º–∫—É
    """
    
    def __init__(
        self,
        shop_repo: ShopRepository,
        snapshot_repo: SnapshotRepository,
        item_repo: ShopItemRepository,
        parse_category_uc: ParseCategoryUseCase,
    ):
        self.shop_repo = shop_repo
        self.snapshot_repo = snapshot_repo
        self.item_repo = item_repo
        self.parse_category_uc = parse_category_uc
    
    def execute(self, shop_code: str, worker_name: str = None) -> Snapshot:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
        
        Args:
            shop_code: –ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞ (moscow/oasis/neva)
            worker_name: –ò–º—è –≤–æ—Ä–∫–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            Snapshot
        """
        # –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω
        shop = self.shop_repo.get_by_code(shop_code)
        if not shop:
            raise ValueError(f"Shop {shop_code} not found")
        
        print(f"üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ {shop.name}...")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_items = 0
        total_groups = 0
        item_ids: List[int] = []
        
        for category in config.SHOP_CATEGORIES:
            try:
                items_count, groups_count = self.parse_category_uc.execute(shop_code, category)
                total_items += items_count
                total_groups += groups_count
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        all_shop_items = self.item_repo.get_list(shop_id=shop.id, limit=100000)
        item_ids = [item.id for item in all_shop_items]
        
        # –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫
        snapshot = Snapshot(
            shop_id=shop.id,
            items_count=len(item_ids),
            worker_name=worker_name or f"{shop_code}_worker",
        )
        snapshot = self.snapshot_repo.create(snapshot)
        
        # –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
        self.snapshot_repo.link_items(snapshot.id, item_ids)
        
        print(f"‚úì –°–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω: ID={snapshot.id}, —Ç–æ–≤–∞—Ä–æ–≤={len(item_ids)}, –≥—Ä—É–ø–ø={total_groups}")
        return snapshot


