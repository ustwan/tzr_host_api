"""Use Case: –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –≥—Ä—É–ø–ø"""
from typing import List, Set, Tuple
import time

from app.domain.entities import ShopItem, ShopParseResult
from app.infrastructure.game_socket_client import GameSocketClient
from app.parsers.shop_parser import ShopParser
from app.infrastructure.db.repositories import (
    ShopRepository, ItemTemplateRepository, ShopItemRepository
)
from app.config import config


class ParseCategoryUseCase:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ü–∞–≥–∏–Ω–∞—Ü–∏—é (–ø–µ—Ä–µ–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ –ø–æ–≤—Ç–æ—Ä–∞)
    - –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø (count="N")
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    """
    
    def __init__(
        self,
        shop_repo: ShopRepository,
        template_repo: ItemTemplateRepository,
        item_repo: ShopItemRepository,
        client: GameSocketClient,
    ):
        self.shop_repo = shop_repo
        self.template_repo = template_repo
        self.item_repo = item_repo
        self.client = client
    
    def execute(self, shop_code: str, category: str) -> Tuple[int, int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            shop_code: –ö–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞ (moscow/oasis/neva)
            category: –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (k, p, v, ...)
        
        Returns:
            (items_count, groups_expanded_count)
        """
        # –ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω
        shop = self.shop_repo.get_by_code(shop_code)
        if not shop:
            raise ValueError(f"Shop {shop_code} not found")
        
        print(f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –≤ –º–∞–≥–∞–∑–∏–Ω–µ {shop.name}...")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        all_items = []
        groups_to_expand = []
        
        page = 0
        seen_ids: Set[int] = set()
        
        while True:
            print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}...")
            
            # –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            xml_response = self._fetch_page_with_retry(category, page, "", shop_code)
            if not xml_response:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
                break
            
            # –ü–∞—Ä—Å–∏–Ω–≥
            result = ShopParser.parse_response(xml_response, shop_code)
            if not result:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—ã (–≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ items!)
            if result.has_groups:
                groups_to_expand.extend(self._extract_groups(xml_response))
                print(f"    üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: {len(self._extract_groups(xml_response))}")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            if not result.items:
                if page == 0 and result.has_groups:
                    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ —Å –≥—Ä—É–ø–ø–∞–º–∏ - –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    print(f"    ‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ –µ—Å—Ç—å {len(self._extract_groups(xml_response))} –≥—Ä—É–ø–ø")
                    page += 1
                    time.sleep(config.PAGE_RETRY_DELAY)
                    continue
                else:
                    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –≥—Ä—É–ø–ø –∏–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è
                    print(f"    ‚ö† –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
                    break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä (—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞?)
            current_ids = {item.id for item in result.items}
            
            if current_ids.issubset(seen_ids):
                # –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –≤–∏–¥–µ–ª–∏ ‚Üí –ø–æ–≤—Ç–æ—Ä ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                print(f"    ‚úì –ü–æ–≤—Ç–æ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} (–ø–æ—Å–ª–µ–¥–Ω—è—è: {page-1})")
                break
            
            # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            new_items = [item for item in result.items if item.id not in seen_ids]
            all_items.extend(new_items)
            seen_ids.update(current_ids)
            
            print(f"    ‚úì –ù–∞–π–¥–µ–Ω–æ {len(new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–≤—Å–µ–≥–æ {len(all_items)}) [‚è± {page*2:.0f}s]")
            
            page += 1
            time.sleep(config.PAGE_RETRY_DELAY)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        
        # –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø
        groups_expanded = 0
        if groups_to_expand:
            print(f"  üì¶ –†–∞—Å–∫—Ä—ã—Ç–∏–µ {len(groups_to_expand)} –≥—Ä—É–ø–ø...")
            group_items = self._expand_groups(shop_code, category, groups_to_expand)
            all_items.extend(group_items)
            groups_expanded = len(groups_to_expand)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(all_items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
        for item in all_items:
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–±–ª–æ–Ω (–ø–æ name, type, category –∏–∑ raw_attributes)
            raw = item.raw_attributes
            if "name" in raw and "type" in raw:
                template = self.template_repo.get_or_create(
                    type=raw["type"],
                    name=raw["name"],
                    category=category
                )
                item.template_id = template.id
            
            item.shop_id = shop.id
            self.item_repo.upsert(item)
        
        print(f"‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {len(all_items)} —Ç–æ–≤–∞—Ä–æ–≤, {groups_expanded} –≥—Ä—É–ø–ø")
        return len(all_items), groups_expanded
    
    def _fetch_page_with_retry(self, category: str, page: int, filter_str: str = "", shop_code: str = "moscow") -> str:
        """–ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å retry –∏ auto-reconnect"""
        # –ü–æ–ª—É—á–∏—Ç—å bot credentials –¥–ª—è auto-reconnect
        bots_config = config.get_bots_config()
        bot_config = bots_config.get(shop_code)
        login = bot_config.login if bot_config else None
        login_key = bot_config.login_key if bot_config else None
        
        for attempt in range(config.PAGE_RETRY_ATTEMPTS):
            xml = self.client.fetch_shop_category(category, page, filter_str, login, login_key)
            if xml:
                return xml
            
            if attempt < config.PAGE_RETRY_ATTEMPTS - 1:
                print(f"    ‚ö† Retry {attempt+1}/{config.PAGE_RETRY_ATTEMPTS}...")
                time.sleep(config.PAGE_RETRY_DELAY)
        
        return None
    
    def _extract_groups(self, xml_str: str) -> List[dict]:
        """–ò–∑–≤–ª–µ—á—å –≥—Ä—É–ø–ø—ã –∏–∑ XML (–∏—Å–∫–ª—é—á–∞—è —Ç–æ–≤–∞—Ä—ã-—Å—Ç–∞–∫–∏ —Å id)"""
        import xml.etree.ElementTree as ET
        
        groups = []
        try:
            root = ET.fromstring(xml_str)
            for item_el in root.findall("O"):
                # –ì—Ä—É–ø–ø–∞ = count –µ—Å—Ç—å, –Ω–æ id –Ω–µ—Ç
                # –¢–æ–≤–∞—Ä-—Å—Ç–∞–∫ (–ø–∞—Ç—Ä–æ–Ω—ã, —ç–Ω–µ—Ä–≥–æ–º–æ–¥—É–ª–∏) = count –µ—Å—Ç—å –ò id –µ—Å—Ç—å (–ø–∞—Ä—Å–∏—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä)
                if "count" in item_el.attrib and "id" not in item_el.attrib:
                    # –≠—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
                    groups.append({
                        "name": item_el.get("name"),
                        "type": item_el.get("type"),
                        "count": int(item_el.get("count", 0)),
                    })
        except:
            pass
        
        return groups
    
    def _expand_groups(self, shop_code: str, category: str, groups: List[dict]) -> List[ShopItem]:
        """–†–∞—Å–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤"""
        all_group_items = []
        
        for group in groups:
            filter_str = f"name:{group['name']},type:{group['type']}"
            print(f"    üîì –ì—Ä—É–ø–ø–∞: {group['name']} (count={group['count']})")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            page = 0
            seen_ids: Set[int] = set()
            
            while True:
                # –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –≥—Ä—É–ø–ø—ã
                xml = self._fetch_page_with_retry(category, page, filter_str, shop_code)
                if not xml:
                    break
                
                result = ShopParser.parse_response(xml, shop_code)
                if not result or not result.items:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
                current_ids = {item.id for item in result.items}
                if current_ids.issubset(seen_ids):
                    break
                
                new_items = [item for item in result.items if item.id not in seen_ids]
                all_group_items.extend(new_items)
                seen_ids.update(current_ids)
                
                page += 1
                time.sleep(config.PAGE_RETRY_DELAY)
            
            print(f"      ‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(seen_ids)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã")
        
        return all_group_items


