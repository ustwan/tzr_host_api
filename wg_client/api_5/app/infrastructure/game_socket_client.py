"""–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Å—Å–∏–π)"""
import socket
import xml.etree.ElementTree as ET
from typing import Optional, Tuple
from datetime import datetime
import hashlib


class GameSocketClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –±–æ—Ç–æ–≤ (–∫–∞–∫ –≤ XML Workers)
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
    - –û—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ <SH />
    - –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á—Ç–æ –∏ XML Workers
    """
    
    def __init__(self, host: str = "185.92.72.18", port: int = 5190, timeout: int = 10):
        self.host = host
        self.port = port
        self.timeout = timeout
        self.session_id: Optional[str] = None
        self.authenticated: bool = False
        self._sock: Optional[socket.socket] = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∫–µ—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    def connect(self) -> socket.socket:
        """–°–æ–∑–¥–∞—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ–∫–µ—Ç"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(self.timeout)
        sock.connect((self.host, self.port))
        return sock
    
    def send_and_receive(self, request: str, end_tag: str) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        
        Args:
            request: XML –∑–∞–ø—Ä–æ—Å
            end_tag: –¢–µ–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "</LOGIN>" –∏–ª–∏ "</SH>")
        
        Returns:
            XML –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            sock = self.connect()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            sock.sendall(request.encode('utf-8'))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = b""
            while True:
                chunk = sock.recv(4096)
                if not chunk:
                    break
                response += chunk
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è XML
                if end_tag.encode('utf-8') in response:
                    break
            
            sock.close()
            return response.decode('utf-8', errors='ignore')
            
        except socket.timeout:
            print(f"‚è± Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {self.host}:{self.port}")
            return None
        except ConnectionRefusedError:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {self.host}:{self.port}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None
    
    def authenticate(self, login: str, login_key: str) -> Tuple[bool, Optional[str]]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞ –≤ –∏–≥—Ä–µ (–∫–∞–∫ –≤ XML Workers)
        
        Args:
            login: –õ–æ–≥–∏–Ω –±–æ—Ç–∞ (LOGIN_NAME)
            login_key: –ö–ª—é—á –±–æ—Ç–∞ (LOGIN_KEY)
        
        Returns:
            (success, session_info or error_message)
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect((self.host, self.port))
            
            # –§–æ—Ä–º–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ XML Workers
            login_template = '<LOGIN v3="10.20.30.40" lang="ru" v2="4875537" v="108" p="{key}" l="{login_name}" />\x00'
            login_xml = login_template.format(key=login_key, login_name=login)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω
            sock.sendall(login_xml.encode('utf-8'))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å OK –∏–ª–∏ –æ—à–∏–±–∫–∞)
            response = sock.recv(8192)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GETME
            sock.sendall("<GETME />\x00".encode('utf-8'))
            
            # –ñ–¥—ë–º MYPARAM
            import time
            time.sleep(1.5)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self._sock = sock
            self.authenticated = True
            self.session_id = login  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–Ω –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            
            print(f"‚úì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {login}: —É—Å–ø–µ—à–Ω–æ")
            return True, login
            
        except socket.timeout:
            print(f"‚è± Timeout –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {login}")
            return False, "Timeout"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {login}: {e}")
            return False, str(e)
    
    def ping(self) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å keep-alive –ø–∏–Ω–≥ (–∫–∞–∫ –≤ XML Workers)
        
        Returns:
            True –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∂–∏–≤–∞
        """
        # DEBUG
        if not login or not login_key:
            print(f"‚ö†Ô∏è  DEBUG: login={login}, login_key=SET" if login_key else f"‚ö†Ô∏è  DEBUG: login={login}, login_key=NONE")
        
        if not self.authenticated or not self._sock:
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º N (keep-alive)
            self._sock.sendall("<N />\x00".encode('utf-8'))
            return True
        except:
            self.authenticated = False
            return False
    
    def _is_socket_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ–∫–µ—Ç –µ—â–µ –∂–∏–≤–æ–π"""
        if not self._sock:
            return False
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            self._sock.setblocking(0)
            data = self._sock.recv(1, socket.MSG_PEEK)
            self._sock.setblocking(1)
            return len(data) > 0 or True
        except BlockingIOError:
            # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ
            self._sock.setblocking(1)
            return True
        except:
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–µ
            return False
    
    def _ensure_connected(self, login: str, login_key: str) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"""
        if self.authenticated and self._is_socket_alive():
            return True
        
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("  üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É...")
        self.disconnect()
        success, _ = self.authenticate(login, login_key)
        if success:
            print("  ‚úì –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return success
    
    def fetch_shop_category(
        self, 
        category: str, 
        page: int = 0, 
        filter_str: str = "",
        login: str = None,
        login_key: str = None
    ) -> Optional[str]:
        """
        –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (—Å auto-reconnect)
        
        Args:
            category: –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (k, p, v, h, ...)
            page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å 0)
            filter_str: —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≥—Ä—É–ø–ø (name:...,type:...)
            login: –ª–æ–≥–∏–Ω –±–æ—Ç–∞ (–¥–ª—è auto-reconnect)
            login_key: –∫–ª—é—á –±–æ—Ç–∞ (–¥–ª—è auto-reconnect)
        
        Returns:
            XML —Å—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # DEBUG
        if not login or not login_key:
            print(f"‚ö†Ô∏è  DEBUG: login={login}, login_key=SET" if login_key else f"‚ö†Ô∏è  DEBUG: login={login}, login_key=NONE")
        
        if not self.authenticated or not self._sock:
            print("‚ùå Not authenticated. Call authenticate() first.")
            return None
        
        # Auto-reconnect –ø—Ä–∏ Broken pipe
        max_retries = 3  # 3 –ø–æ–ø—ã—Ç–∫–∏: 0, 1, 2
        for attempt in range(max_retries):
            try:
                # –ó–∞–ø—Ä–æ—Å –º–∞–≥–∞–∑–∏–Ω–∞ (–∞–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã //blook –≤ XML Workers)
                request = f'<SH c="{category}" s="{filter_str}" p="{page}" />\x00'
                self._sock.sendall(request.encode('utf-8'))
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –¥–æ </SH>
                response = b""
                self._sock.settimeout(self.timeout)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º timeout –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (20 —Å–µ–∫)
                
                while True:
                    chunk = self._sock.recv(4096)
                    if not chunk:
                        break
                    response += chunk
                    
                    if b"</SH>" in response:
                        break
                
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞
                xml_str = response.decode('utf-8', errors='replace')
                xml_str = xml_str.replace('\x00', '').replace('\x1f', '')
                
                # –ò–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π XML (–æ—Ç <SH –¥–æ </SH>)
                if '<SH' in xml_str and '</SH>' in xml_str:
                    start = xml_str.find('<SH')
                    end = xml_str.find('</SH>') + 5
                    xml_str = xml_str[start:end]
                
                return xml_str
                
            except socket.timeout:
                print(f"‚è± Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞–≥–∞–∑–∏–Ω–∞")
                return None
            except Exception as e:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Broken pipe
                error_msg = str(e)
                is_broken_pipe = (
                    isinstance(e, (BrokenPipeError, ConnectionResetError, OSError)) or
                    'Broken pipe' in error_msg or
                    'Connection reset' in error_msg
                )
                
                print(f"    üêõ DEBUG except: type={type(e).__name__}, is_broken={is_broken_pipe}, attempt={attempt}, has_creds={bool(login and login_key)}")
                
                if is_broken_pipe and attempt < max_retries - 1 and login and login_key:  # attempt < 2
                    print(f"    ‚ö†Ô∏è  Broken pipe, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    if self._ensure_connected(login, login_key):
                        continue  # Retry
                
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
                return None
        
        return None
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã (–∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é)"""
        if self._sock:
            try:
                self._sock.close()
            except:
                pass
            self._sock = None
            
        self.session_id = None
        self.authenticated = False
        print("‚úì Disconnected from game server")
    
    def __enter__(self):
        """Context manager: –≤—Ö–æ–¥"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager: –≤—ã—Ö–æ–¥ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)"""
        self.disconnect()


class BotSessionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –±–æ—Ç–æ–≤
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—è–º–∏ 3 –±–æ—Ç–æ–≤ (moscow, oasis, neva):
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    - Keep-alive –ø–∏–Ω–≥–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    """
    
    def __init__(self, host: str, port: int, timeout: int = 10):
        self.host = host
        self.port = port
        self.timeout = timeout
        self.clients: dict[str, GameSocketClient] = {}
        self.last_ping: dict[str, datetime] = {}
    
    def authenticate_bot(self, shop_code: str, login: str, password: str) -> Tuple[bool, str]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        
        Args:
            shop_code: moscow/oasis/neva
            login: –ª–æ–≥–∏–Ω –±–æ—Ç–∞
            password: –ø–∞—Ä–æ–ª—å –±–æ—Ç–∞
        
        Returns:
            (success, session_id or error)
        """
        client = GameSocketClient(self.host, self.port, self.timeout)
        success, result = client.authenticate(login, password)
        
        if success:
            self.clients[shop_code] = client
            self.last_ping[shop_code] = datetime.utcnow()
            return True, result
        else:
            return False, result
    
    def get_client(self, shop_code: str) -> Optional[GameSocketClient]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        return self.clients.get(shop_code)
    
    def ping_all(self) -> dict[str, bool]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥–∏ –≤—Å–µ–º –±–æ—Ç–∞–º
        
        Returns:
            {shop_code: alive}
        """
        results = {}
        for shop_code, client in self.clients.items():
            alive = client.ping()
            results[shop_code] = alive
            
            if alive:
                self.last_ping[shop_code] = datetime.utcnow()
            else:
                print(f"‚ö† Session expired for {shop_code}")
        
        return results
    
    def disconnect_all(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        for shop_code, client in self.clients.items():
            client.disconnect()
        
        self.clients.clear()
        self.last_ping.clear()
    
    def get_status(self) -> dict[str, dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        status = {}
        for shop_code, client in self.clients.items():
            last_ping = self.last_ping.get(shop_code)
            status[shop_code] = {
                "authenticated": client.authenticated,
                "session_id": client.session_id[:8] + "..." if client.session_id else None,
                "last_ping": last_ping.isoformat() if last_ping else None,
            }
        return status


