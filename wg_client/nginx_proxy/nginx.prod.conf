# ============================================================================
# NGINX REVERSE PROXY - PRODUCTION (HOST_SERVER)
# ============================================================================
# Этот конфиг для продакшн на HOST_SERVER с SSL
# Доступ: https://api.yourdomain.com/api/register
# ============================================================================

# Rate limiting зоны (более строгие для продакшн)
limit_req_zone $binary_remote_addr zone=register_limit:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=health_limit:10m rate=30r/m;
limit_req_zone $http_x_api_key zone=api_key_limit:10m rate=100r/m;

# Логи
log_format api_log '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   'api_key=$http_x_api_key request_id=$http_x_request_id '
                   'response_time=$request_time upstream_time=$upstream_response_time';

# Fail2ban pattern для блокировки атак
log_format fail2ban '$remote_addr [$time_local] "$request" $status';

upstream wg_api {
    # IP адрес WireGuard клиента внутри VPN
    # Замените на ваш реальный IP из wg0 конфига
    server 10.8.0.2:80;
    
    # Или используйте 1010 порт если Traefik на хосте
    # server 127.0.0.1:1010;
    
    keepalive 32;
}

# =================================================================
# HTTPS SERVER (основной)
# =================================================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.yourdomain.com;

    # ========================================
    # SSL СЕРТИФИКАТЫ (Let's Encrypt)
    # ========================================
    # Замените на ваш домен
    ssl_certificate /etc/letsencrypt/live/api.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.yourdomain.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/api.yourdomain.com/chain.pem;

    # SSL параметры (Mozilla Modern)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # SSL session
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Логи
    access_log /var/log/nginx/api-access.log api_log;
    error_log /var/log/nginx/api-error.log warn;
    access_log /var/log/nginx/fail2ban.log fail2ban;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Увеличиваем размер тела запроса
    client_max_body_size 1M;
    client_body_buffer_size 128k;

    # =================================================================
    # ЭНДПОИНТ РЕГИСТРАЦИИ (защищен API ключом и rate limiting)
    # =================================================================
    location /api/register {
        # Rate limiting: 10 запросов в минуту с одного IP
        limit_req zone=register_limit burst=3 nodelay;
        limit_req_status 429;

        # Дополнительный rate limit по API ключу
        limit_req zone=api_key_limit burst=20 nodelay;

        # ========================================
        # ПРОВЕРКА API КЛЮЧА (ОБЯЗАТЕЛЬНО!)
        # ========================================
        # ВАЖНО: Замените на ваш реальный секретный ключ!
        # Генерация: openssl rand -base64 32
        set $api_key_valid 0;
        
        # PROD API KEY - замените на свой!
        if ($http_x_api_key = "REPLACE_WITH_YOUR_SECRET_API_KEY_HERE") {
            set $api_key_valid 1;
        }
        
        # Если ключ неверный - возвращаем 403
        if ($api_key_valid = 0) {
            return 403 '{"error": "invalid_api_key", "message": "API key is missing or invalid"}';
        }

        # CORS для продакшн (замените на ваш домен сайта)
        add_header 'Access-Control-Allow-Origin' 'https://yourwebsite.com' always;
        add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Request-Id, X-API-Key' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' '86400' always;
        
        # Preflight запросы
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Разрешаем только POST
        limit_except POST {
            deny all;
        }

        # Proxy в WG_CLIENT API
        proxy_pass http://wg_api/api/register;
        
        # Заголовки
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-Id $http_x_request_id;
        
        # Таймауты
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Буферизация
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Обработка ошибок
        proxy_intercept_errors off;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
    }

    # =================================================================
    # HEALTH CHECK (публичный, с мягким rate limiting)
    # =================================================================
    location /health {
        limit_req zone=health_limit burst=10 nodelay;
        
        proxy_pass http://wg_api/api/register/health;
        proxy_set_header Host $host;
        
        access_log off;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }

    # =================================================================
    # SERVER STATUS (публичный, для сайта)
    # =================================================================
    location /api/server/status {
        # Мягкий rate limit для публичного эндпоинта
        limit_req zone=health_limit burst=20 nodelay;
        
        # CORS для продакшн (замените на ваш домен сайта)
        add_header 'Access-Control-Allow-Origin' 'https://yourwebsite.com' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type' always;
        
        # Preflight запросы
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Разрешаем только GET
        limit_except GET {
            deny all;
        }

        # Proxy в WG_CLIENT API (API_1)
        proxy_pass http://wg_api/api/server/status;
        
        # Заголовки
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Таймауты
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Кеширование для уменьшения нагрузки
        proxy_cache_valid 200 30s;
        add_header X-Cache-Status $upstream_cache_status always;
    }

    # =================================================================
    # БЛОКИРОВКА ВСЕХ ОСТАЛЬНЫХ ПУТЕЙ
    # =================================================================
    location / {
        return 404 '{"error": "not_found", "message": "Endpoint not found"}';
        add_header Content-Type application/json always;
    }
}

# =================================================================
# HTTP → HTTPS REDIRECT
# =================================================================
server {
    listen 80;
    listen [::]:80;
    server_name api.yourdomain.com;

    # Для Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Все остальное → HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

