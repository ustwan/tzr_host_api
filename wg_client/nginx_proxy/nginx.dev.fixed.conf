# ============================================================================
# NGINX REVERSE PROXY - ЛОКАЛЬНАЯ РАЗРАБОТКА
# ============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Логи
    log_format api_log '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'api_key=$http_x_api_key request_id=$http_x_request_id '
                       'response_time=$request_time';

    access_log /var/log/nginx/access.log api_log;

    sendfile on;
    keepalive_timeout 65;

    # Rate limiting зоны
    limit_req_zone $binary_remote_addr zone=register_limit:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=health_limit:10m rate=30r/m;

    # Upstream для регистрации через Traefik
    upstream wg_api {
        # Для локальной разработки - Traefik на хосте
        server host.docker.internal:1010;
        keepalive 32;
    }

    # Upstream для server status - напрямую к API_1
    upstream api_1 {
        server host.docker.internal:8081;
        keepalive 16;
    }

    # Основной сервер
    server {
        listen 80;
        server_name localhost;

        # Увеличиваем размер тела запроса для больших JSON
        client_max_body_size 1M;
        client_body_buffer_size 128k;

        # =================================================================
        # ЭНДПОИНТ РЕГИСТРАЦИИ (защищен API ключом и rate limiting)
        # =================================================================
        location /api/register {
            # Rate limiting: 10 запросов в минуту с одного IP
            limit_req zone=register_limit burst=3 nodelay;
            limit_req_status 429;

            # ========================================
            # ПРОВЕРКА API КЛЮЧА (ОБЯЗАТЕЛЬНО!)
            # ========================================
            set $api_key_valid 0;
            
            # Проверяем API ключ в заголовке X-API-Key
            if ($http_x_api_key = "dev_api_key_12345") {
                set $api_key_valid 1;
            }
            
            # Если ключ неверный - возвращаем 403
            if ($api_key_valid = 0) {
                return 403 '{"error": "invalid_api_key", "message": "API key is missing or invalid"}';
            }

            # CORS для локального тестирования
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Request-Id, X-API-Key' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            
            # Обработка preflight запросов
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Разрешаем только POST
            limit_except POST {
                deny all;
            }

            # Proxy в WG_CLIENT API
            proxy_pass http://wg_api/api/register;
            
            # Заголовки
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-Id $http_x_request_id;
            
            # Таймауты
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Буферизация
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Обработка ошибок
            proxy_intercept_errors off;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }

        # =================================================================
        # СТАТУС СЕРВЕРА (публичный, без API ключа, с rate limiting)
        # =================================================================
        location /api/server/status {
            limit_req zone=health_limit burst=10 nodelay;
            limit_req_status 429;

            # CORS для локального тестирования
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, X-Request-Id' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            
            # Обработка preflight запросов
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Разрешаем только GET и OPTIONS
            limit_except GET OPTIONS {
                deny all;
            }

            # Proxy напрямую в API_1
            proxy_pass http://api_1/server/status;
            
            # Заголовки
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Таймауты
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # =================================================================
        # HEALTH CHECK - простой
        # =================================================================
        location /health {
            access_log off;
            return 200 '{"status": "ok"}\n';
            add_header Content-Type application/json always;
        }

        # =================================================================
        # HEALTH CHECK - API регистрации
        # =================================================================
        location /api/register/health {
            limit_req zone=health_limit burst=10 nodelay;
            
            proxy_pass http://wg_api/api/register/health;
            proxy_set_header Host $host;
            
            # Логи отключены для health checks
            access_log off;
            
            # Быстрые таймауты
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # =================================================================
        # NGINX STATUS (для мониторинга)
        # =================================================================
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;
            deny all;
        }

        # =================================================================
        # БЛОКИРОВКА ВСЕХ ОСТАЛЬНЫХ ПУТЕЙ
        # =================================================================
        location / {
            return 404 '{"error": "not_found", "message": "Endpoint not found"}';
            add_header Content-Type application/json always;
        }
    }
}
