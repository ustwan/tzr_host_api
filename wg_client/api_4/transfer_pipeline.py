#!/usr/bin/env python3
"""
–ü–∞–π–ø–ª–∞–π–Ω –ø–µ—Ä–µ–Ω–æ—Å–∞ TZB —Ñ–∞–π–ª–æ–≤:
1. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è <BATTLE> —Ç–µ–≥–æ–≤
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ë–î (–ø–æ SHA256)
3. –°–∂–∞—Ç–∏–µ pigz
4. –ü–µ—Ä–µ–¥–∞—á–∞ –≤ HOST_API
"""
import asyncio
import os
import sys
import hashlib
import subprocess
import tempfile
from pathlib import Path
from typing import List, Dict, Any, Optional
import httpx

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/app')

from app.database import BattleDatabase
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∏–∑ example/parser
import sys
sys.path.append('/app/example/parser')
from dedupe_tzb import dedupe_tzb_content


class TransferPipeline:
    def __init__(self, source_dir: str, host_api_url: str = "http://api_mother:8083"):
        self.source_dir = Path(source_dir)
        self.host_api_url = host_api_url
        self.db = BattleDatabase()
        self.processed_count = 0
        self.skipped_count = 0
        self.error_count = 0
        
    async def calculate_sha256(self, content: str) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Ö–µ—à–∞"""
        return hashlib.sha256(content.encode('utf-8')).hexdigest()
    
    async def check_file_exists_in_db(self, sha256: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –ë–î –ø–æ SHA256"""
        try:
            query = "SELECT id FROM battles WHERE sha256 = $1 LIMIT 1"
            result = await self.db._execute_one(query, sha256)
            return result is not None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False
    
    async def check_archive_exists_in_db(self, original_sha256: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ .tzb.gz –≤ –ë–î –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É SHA256"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∂–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º SHA256 (–¥–æ —Å–∂–∞—Ç–∏—è)
            query = "SELECT id FROM battles WHERE sha256 = $1 AND storage_key LIKE '%.tzb.gz' LIMIT 1"
            result = await self.db._execute_one(query, original_sha256)
            return result is not None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞ –≤ –ë–î: {e}")
            return False
    
    async def dedupe_file(self, file_path: Path) -> str:
        """–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö <BATTLE> —Ç–µ–≥–æ–≤"""
        print(f"üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: {file_path.name}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        deduped_content = dedupe_tzb_content(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
        if deduped_content != content:
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ <BATTLE> —Ç–µ–≥–∏")
        else:
            print(f"   ‚ÑπÔ∏è  –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return deduped_content
    
    async def compress_with_pigz(self, content: str, output_path: Path) -> bool:
        """–°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é pigz"""
        try:
            print(f"üóúÔ∏è  –°–∂–∞—Ç–∏–µ pigz: {output_path.name}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as tmp_file:
                tmp_file.write(content)
                tmp_file_path = tmp_file.name
            
            # –°–∂–∏–º–∞–µ–º —Å –ø–æ–º–æ—â—å—é pigz (–±–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º)
            result = subprocess.run([
                'pigz', '-c', tmp_file_path
            ], capture_output=True)  # –£–±–∏—Ä–∞–µ–º text=True –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            if result.returncode == 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª (–±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                with open(output_path, 'wb') as f:
                    f.write(result.stdout)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(tmp_file_path)
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ pigz: {result.stderr.decode('utf-8', errors='ignore')}")
                os.unlink(tmp_file_path)
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
            return False
    
    async def transfer_to_api4(self, file_path: Path) -> bool:
        """–ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ API 4"""
        try:
            print(f"üì§ –ü–µ—Ä–µ–¥–∞—á–∞ –≤ API 4: {file_path.name}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –±–µ–∑ HTTP
            from app.loader import BattleLoader
            from app.database import BattleDatabase
            from app.parser import BattleParser
            import gzip
            import tempfile
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–∂–∞—Ç, —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            if file_path.suffix == '.gz':
                with gzip.open(file_path, 'rt', encoding='utf-8') as f:
                    content = f.read()
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–µ—Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(mode='w', suffix='.tzb', delete=False, encoding='utf-8') as tmp_file:
                    tmp_file.write(content)
                    tmp_tzb_path = tmp_file.name
            else:
                tmp_tzb_path = str(file_path)
            
            db = BattleDatabase()
            parser = BattleParser()
            loader = BattleLoader(db, parser)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            result = await loader.process_file(tmp_tzb_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
            if file_path.suffix == '.gz':
                import os
                os.unlink(tmp_tzb_path)
            
            if result and result.get("battle_id"):
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: –§–∞–π–ª {file_path.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                await db.disconnect()
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
                await db.disconnect()
                return False
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏: {type(e).__name__}: {e}")
            return False
    
    async def process_single_file(self, file_path: Path, temp_dir: Path) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω"""
        result = {
            'file': file_path.name,
            'status': 'pending',
            'steps': {},
            'error': None
        }
        
        try:
            # –®–∞–≥ 1: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
            print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")
            deduped_content = await self.dedupe_file(file_path)
            result['steps']['dedupe'] = 'success'
            
            # –®–∞–≥ 2: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–æ —Å–∂–∞—Ç–∏—è)
            original_sha256 = await self.calculate_sha256(deduped_content)
            result['original_sha256'] = original_sha256
            result['steps']['sha256'] = 'success'
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ .tzb.gz –≤ –ë–î
            archive_exists = await self.check_archive_exists_in_db(original_sha256)
            if archive_exists:
                print(f"   ‚è≠Ô∏è  –ê—Ä—Ö–∏–≤ .tzb.gz —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                result['status'] = 'skipped'
                result['steps']['archive_check'] = 'exists'
                self.skipped_count += 1
                return result
            
            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ë–î
            file_exists = await self.check_file_exists_in_db(original_sha256)
            if file_exists:
                print(f"   üîÑ –ù–µ—Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–æ–º")
                result['steps']['archive_check'] = 'overwrite'
            else:
                print(f"   ‚ú® –ù–æ–≤—ã–π —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤")
                result['steps']['archive_check'] = 'new'
            
            # –®–∞–≥ 5: –°–∂–∞—Ç–∏–µ pigz
            compressed_path = temp_dir / f"{file_path.stem}.tzb.gz"
            if not await self.compress_with_pigz(deduped_content, compressed_path):
                result['status'] = 'error'
                result['error'] = 'Compression failed'
                result['steps']['compress'] = 'failed'
                self.error_count += 1
                return result
            
            result['steps']['compress'] = 'success'
            
            # –®–∞–≥ 6: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256 —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(compressed_path, 'rb') as f:
                compressed_content = f.read()
            compressed_sha256 = hashlib.sha256(compressed_content).hexdigest()
            result['compressed_sha256'] = compressed_sha256
            
            # –®–∞–≥ 7: –ü–µ—Ä–µ–¥–∞—á–∞ –≤ API 4
            if not await self.transfer_to_api4(compressed_path):
                result['status'] = 'error'
                result['error'] = 'Transfer failed'
                result['steps']['transfer'] = 'failed'
                self.error_count += 1
                return result
            
            result['steps']['transfer'] = 'success'
            result['status'] = 'success'
            self.processed_count += 1
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            compressed_path.unlink()
            
        except Exception as e:
            result['status'] = 'error'
            result['error'] = str(e)
            self.error_count += 1
        
        return result
    
    async def process_batch(self, files: List[Path], batch_size: int = 10) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Ñ–∞–π–ª–æ–≤"""
        results = {
            'total_files': len(files),
            'processed': 0,
            'skipped': 0,
            'errors': 0,
            'details': []
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            for i in range(0, len(files), batch_size):
                batch = files[i:i + batch_size]
                print(f"\nüîÑ –ë–∞—Ç—á {i//batch_size + 1}: —Ñ–∞–π–ª—ã {i+1}-{min(i+batch_size, len(files))}")
                
                for file_path in batch:
                    result = await self.process_single_file(file_path, temp_path)
                    results['details'].append(result)
                    
                    if result['status'] == 'success':
                        results['processed'] += 1
                    elif result['status'] == 'skipped':
                        results['skipped'] += 1
                    else:
                        results['errors'] += 1
        
        return results
    
    async def transfer_mass_data(self, limit: int = 1000) -> Dict[str, Any]:
        """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å –¥–æ {limit} —Ñ–∞–π–ª–æ–≤...")
        print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_dir}")
        print(f"üåê HOST_API: {self.host_api_url}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TZB —Ñ–∞–π–ª—ã
        tzb_files = list(self.source_dir.rglob('*.tzb'))[:limit]
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tzb_files)} TZB —Ñ–∞–π–ª–æ–≤")
        
        if not tzb_files:
            print("‚ùå TZB —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {'error': 'No TZB files found'}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
        results = await self.process_batch(tzb_files, batch_size=5)
        
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total_files']}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['processed']}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –≤ –ë–î): {results['skipped']}")
        print(f"   –û—à–∏–±–æ–∫: {results['errors']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        errors = [r for r in results['details'] if r['status'] == 'error']
        if errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):")
            for error in errors[:5]:
                print(f"   {error['file']}: {error['error']}")
            if len(errors) > 5:
                print(f"   ... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫")
        
        return results
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.db.disconnect()


async def main():
    if len(sys.argv) < 2:
        print("Usage: transfer_pipeline.py <source_directory> [limit] [host_api_url]")
        print("Example: transfer_pipeline.py /path/to/tzb/files 1000 http://api_mother:8083")
        sys.exit(1)
    
    source_dir = sys.argv[1]
    limit = int(sys.argv[2]) if len(sys.argv) > 2 else 1000
    host_api_url = sys.argv[3] if len(sys.argv) > 3 else "http://api_mother:8083"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ.setdefault("DB_MODE", "test")
    
    pipeline = TransferPipeline(source_dir, host_api_url)
    
    try:
        results = await pipeline.transfer_mass_data(limit)
        print(f"\n‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω: {results}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        await pipeline.cleanup()


if __name__ == "__main__":
    asyncio.run(main())
