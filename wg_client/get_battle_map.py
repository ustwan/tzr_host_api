#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –±–æ—è –∏–∑ API

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 get_battle_map.py 3697692
    python3 get_battle_map.py 3697692 --json
    python3 get_battle_map.py 3697692 --tokens
"""

import sys
import requests
import xml.etree.ElementTree as ET
import json
from typing import Dict, List, Optional, Tuple

API_BASE = "http://localhost:8084"


def get_battle_map(battle_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –±–æ—è —á–µ—Ä–µ–∑ API"""
    
    # 1. –ü–æ–ª—É—á–∞–µ–º XML
    url = f"{API_BASE}/battle/{battle_id}/raw"
    
    try:
        response = requests.get(url, timeout=30)
        
        if response.status_code == 404:
            print(f"‚ùå –ë–æ–π {battle_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", file=sys.stderr)
            return None
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}", file=sys.stderr)
            try:
                error = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error.get('detail', 'Unknown error')}", file=sys.stderr)
            except:
                print(f"   {response.text[:200]}", file=sys.stderr)
            return None
        
        # 2. –ü–∞—Ä—Å–∏–º XML
        xml_content = response.content
        
        try:
            tree = ET.fromstring(xml_content)
        except ET.ParseError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}", file=sys.stderr)
            return None
        
        # 3. –ò—â–µ–º —Ç–µ–≥ <map>
        map_elem = tree.find('.//map')
        
        if map_elem is None:
            print(f"‚ö†Ô∏è  –¢–µ–≥ <map> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ XML –±–æ—è {battle_id}", file=sys.stderr)
            return None
        
        # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        width = int(map_elem.get('width', 0))
        height = int(map_elem.get('height', 0))
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –≤ <data> –∏–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ <map>)
        data_elem = map_elem.find('data')
        if data_elem is not None and data_elem.text:
            map_data = data_elem.text.strip()
        elif map_elem.text:
            map_data = map_elem.text.strip()
        else:
            print(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–≥–µ <map>", file=sys.stderr)
            return None
        
        # 5. –†–∞–∑–±–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        map_rows = [line for line in map_data.split('\n') if line.strip()]
        
        # 6. –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (—Å–∏–º–≤–æ–ª—ã)
        tokens = set()
        for row in map_rows:
            tokens.update(row)
        
        # 7. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Ç–æ–∫–µ–Ω–æ–≤
        token_counts = {}
        for row in map_rows:
            for char in row:
                token_counts[char] = token_counts.get(char, 0) + 1
        
        return {
            "battle_id": battle_id,
            "width": width,
            "height": height,
            "actual_height": len(map_rows),
            "actual_width": max(len(row) for row in map_rows) if map_rows else 0,
            "map_data": map_rows,
            "tokens": sorted(list(tokens)),
            "token_counts": token_counts,
            "total_cells": width * height
        }
        
    except requests.exceptions.ConnectionError:
        print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API ({API_BASE})", file=sys.stderr)
        print(f"   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API_4 –∑–∞–ø—É—â–µ–Ω", file=sys.stderr)
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        return None


def print_map_visual(map_data: Dict):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã"""
    print(f"\n{'='*60}")
    print(f"üó∫Ô∏è  –ö–ê–†–¢–ê –ë–û–Ø #{map_data['battle_id']}")
    print(f"{'='*60}\n")
    
    print(f"üìê –†–∞–∑–º–µ—Ä: {map_data['width']}x{map_data['height']} (–∑–∞—è–≤–ª–µ–Ω–Ω—ã–π)")
    print(f"üìê –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {map_data['actual_width']}x{map_data['actual_height']}")
    print(f"üìä –í—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫: {map_data['total_cells']}\n")
    
    print(f"üî§ –¢–û–ö–ï–ù–´ –ö–ê–†–¢–´ ({len(map_data['tokens'])} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö):")
    for token in map_data['tokens']:
        count = map_data['token_counts'].get(token, 0)
        percent = (count / map_data['total_cells'] * 100) if map_data['total_cells'] > 0 else 0
        
        # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        if token == ' ':
            token_display = "' ' (–ø—Ä–æ–±–µ–ª)"
        elif token == '\t':
            token_display = "'\\t' (—Ç–∞–±)"
        else:
            token_display = f"'{token}'"
        
        print(f"  {token_display:15} ‚Üí {count:5} –∫–ª–µ—Ç–æ–∫ ({percent:5.2f}%)")
    
    print(f"\n{'‚îÄ'*60}")
    print(f"üìç –ö–ê–†–¢–ê:")
    print(f"{'‚îÄ'*60}\n")
    
    for i, row in enumerate(map_data['map_data'], 1):
        print(f"{i:3} | {row}")
    
    print(f"\n{'='*60}\n")


def print_map_tokens(map_data: Dict):
    """–í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤"""
    print(json.dumps(map_data['tokens'], indent=2))


def print_map_json(map_data: Dict):
    """–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    # –£–±–∏—Ä–∞–µ–º map_data –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    output = {
        "battle_id": map_data['battle_id'],
        "width": map_data['width'],
        "height": map_data['height'],
        "tokens": map_data['tokens'],
        "token_counts": map_data['token_counts']
    }
    print(json.dumps(output, indent=2, ensure_ascii=False))


def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 get_battle_map.py <battle_id> [--json|--tokens]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 get_battle_map.py 3697692          # –í–∏–∑—É–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥")
        print("  python3 get_battle_map.py 3697692 --json   # JSON —Ñ–æ—Ä–º–∞—Ç")
        print("  python3 get_battle_map.py 3697692 --tokens # –¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã")
        sys.exit(1)
    
    try:
        battle_id = int(sys.argv[1])
    except ValueError:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π battle_id: {sys.argv[1]}", file=sys.stderr)
        sys.exit(1)
    
    output_mode = sys.argv[2] if len(sys.argv) > 2 else None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    map_data = get_battle_map(battle_id)
    
    if map_data is None:
        sys.exit(1)
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if output_mode == '--json':
        print_map_json(map_data)
    elif output_mode == '--tokens':
        print_map_tokens(map_data)
    else:
        print_map_visual(map_data)


if __name__ == '__main__':
    main()





