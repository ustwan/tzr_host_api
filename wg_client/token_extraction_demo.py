#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –∫–∞—Ä—Ç—ã
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
"""

# –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç—ã
example_map = """
#######################
#.....................#
#.....T...............#
#....TTT..............#
#.....T......W........#
#...........WWW.......#
#............W........#
#.....................#
#######################
"""

def extract_tokens_simple(map_data: str):
    """–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    
    print("üîç –®–ê–ì 1: –ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞")
    print(map_data)
    print()
    
    # –®–∞–≥ 1: –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    map_rows = [line for line in map_data.split('\n') if line.strip()]
    
    print(f"üîç –®–ê–ì 2: –†–∞–∑–±–∏–ª–∏ –Ω–∞ {len(map_rows)} —Å—Ç—Ä–æ–∫")
    for i, row in enumerate(map_rows, 1):
        print(f"  {i:2} | {row}")
    print()
    
    # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    tokens = set()
    for row in map_rows:
        tokens.update(row)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
    
    print(f"üîç –®–ê–ì 3: –ù–∞—à–ª–∏ {len(tokens)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"  –¢–æ–∫–µ–Ω—ã: {sorted(list(tokens))}")
    print()
    
    # –®–∞–≥ 3: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
    token_counts = {}
    for row in map_rows:
        for char in row:
            token_counts[char] = token_counts.get(char, 0) + 1
    
    print("üîç –®–ê–ì 4: –ü–æ–¥—Å—á–∏—Ç–∞–ª–∏ —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
    total_cells = sum(token_counts.values())
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_tokens = sorted(token_counts.items(), key=lambda x: x[1], reverse=True)
    
    for token, count in sorted_tokens:
        percent = (count / total_cells * 100)
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if token == ' ':
            token_display = "' ' (–ø—Ä–æ–±–µ–ª)"
        elif token == '\t':
            token_display = "'\\t' (—Ç–∞–±)"
        else:
            token_display = f"'{token}'"
        
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞
        bar_length = int(percent / 2)  # –ú–∞—Å—à—Ç–∞–± 1% = 0.5 —Å–∏–º–≤–æ–ª–∞
        bar = '‚ñà' * bar_length
        
        print(f"  {token_display:15} {count:4} –∫–ª–µ—Ç–æ–∫ ({percent:5.2f}%) {bar}")
    
    print()
    print(f"üìä –í—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫: {total_cells}")
    print()
    
    return {
        "tokens": sorted(list(tokens)),
        "token_counts": token_counts,
        "total_cells": total_cells
    }


def extract_tokens_verbose(map_data: str):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    
    print("="*60)
    print("–ü–û–î–†–û–ë–ù–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï: –ö–∞–∫ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —Ç–æ–∫–µ–Ω—ã")
    print("="*60)
    print()
    
    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    map_rows = [line for line in map_data.split('\n') if line.strip()]
    first_row = map_rows[0]
    
    print(f"–í–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É: \"{first_row}\"")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ—Ç tokens.update()
    tokens = set()
    
    print("–ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É:")
    print()
    
    for i, char in enumerate(first_row, 1):
        tokens.add(char)
        print(f"  –°–∏–º–≤–æ–ª {i:2}: '{char}' ‚Üí tokens = {sorted(list(tokens))}")
        
        if i == 10:
            print("  ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)")
            break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    tokens.update(first_row[10:])
    print()
    print(f"–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏: {sorted(list(tokens))}")
    print()
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–¥—Å—á—ë—Ç
    print("-"*60)
    print("–ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–∏–º–≤–æ–ª–∞ '#':")
    print("-"*60)
    print()
    
    count = 0
    for row_num, row in enumerate(map_rows, 1):
        row_count = row.count('#')
        count += row_count
        print(f"  –°—Ç—Ä–æ–∫–∞ {row_num:2}: {row_count:2} —Å–∏–º–≤–æ–ª–æ–≤ '#' ‚Üí –≤—Å–µ–≥–æ: {count}")
        
        if row_num == 5:
            print("  ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)")
            break
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç
    total_hash = sum(row.count('#') for row in map_rows)
    print()
    print(f"–ò–¢–û–ì–û —Å–∏–º–≤–æ–ª–æ–≤ '#': {total_hash}")
    print()


if __name__ == '__main__':
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--verbose':
        extract_tokens_verbose(example_map)
    else:
        result = extract_tokens_simple(example_map)
        
        print("="*60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ (JSON):")
        print("="*60)
        print()
        import json
        print(json.dumps(result, indent=2, ensure_ascii=False))





