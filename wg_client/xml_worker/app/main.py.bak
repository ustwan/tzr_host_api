"""
XML Worker - –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –±–æ–µ–≤
–ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥ –æ–¥–Ω–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: Pipeline —Ä–µ–∂–∏–º (–Ω–∞ –æ—Å–Ω–æ–≤–µ pipeline.py)
"""
import os
import logging
import asyncio
from fastapi import FastAPI, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import Optional, List
from app.xml_client import XmlPipelineClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s: %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="XML Worker (Pipeline)",
    description="–í–æ—Ä–∫–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –±–æ–µ–≤ —á–µ—Ä–µ–∑ XML –ø—Ä–æ—Ç–æ–∫–æ–ª (Pipeline —Ä–µ–∂–∏–º)",
    version="2.0.0"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WORKER_ID = os.getenv("WORKER_ID", "unknown")
LOGIN_NAME = os.getenv("LOGIN_NAME", "")
LOGIN_KEY = os.getenv("LOGIN_KEY", "")
API_MOTHER_URL = os.getenv("API_MOTHER_URL", "http://host-api-service-api_mother-1:8001")

if not LOGIN_NAME or not LOGIN_KEY:
    raise ValueError("LOGIN_NAME –∏ LOGIN_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

logger.info(f"XML Worker {WORKER_ID} –∑–∞–ø—É—â–µ–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {LOGIN_NAME}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
xml_client = None

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global xml_client
    xml_client = XmlPipelineClient(login_name=LOGIN_NAME, key=LOGIN_KEY)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Å retry)
    connected = await asyncio.to_thread(xml_client.connect)
    
    if connected:
        logger.info(f"‚úÖ Worker {WORKER_ID} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É (pipeline —Ä–µ–∂–∏–º)")
    else:
        logger.error(f"‚ùå Worker {WORKER_ID} –ù–ï –°–ú–û–ì –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!")
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    global xml_client
    if xml_client:
        xml_client.disconnect()
    logger.info(f"Worker {WORKER_ID} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")


class FetchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∞ –±–æ—è"""
    battle_id: int
    status: str  # success, failed, response_timeout
    error: Optional[str] = None
    size_bytes: Optional[int] = None
    uploaded_to_mother: bool = False


class BatchFetchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ batch –∑–∞–≥—Ä—É–∑–∫—É"""
    battle_ids: List[int]
    max_parallel: int = 10  # –î–ª—è pipeline —Ä–µ–∂–∏–º–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
    upload_to_mother: bool = True


class BatchFetchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ batch –∑–∞–ø—Ä–æ—Å"""
    results: List[FetchResponse]
    total: int
    success: int
    failed: int
    timeout: int


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    global xml_client
    is_connected = xml_client and xml_client.is_authenticated
    return {
        "status": "healthy" if is_connected else "degraded",
        "worker_id": WORKER_ID,
        "login": LOGIN_NAME,
        "authenticated": is_connected
    }


@app.post("/fetch_batch", response_model=BatchFetchResponse)
async def fetch_battle_batch(request: BatchFetchRequest):
    """
    Batch –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –±–æ–µ–≤ —Å –ø–∞–π–ø–ª–∞–π–Ω–∏–Ω–≥–æ–º (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø)
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pipeline –ø–æ–¥—Ö–æ–¥ –∏–∑ pipeline.py:
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–∑—É
    - –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—Ç–æ–∫–æ–º
    - –ë—ã—Å—Ç—Ä–µ–µ –≤ 2.5x —Ä–∞–∑–∞
    - –û–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å batch
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å battle_ids –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
    Returns:
        BatchFetchResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –±–æ—é
    """
    logger.info(f"üì¶ Pipeline batch: {len(request.battle_ids)} –±–æ–µ–≤")
    
    global xml_client
    
    if not xml_client or not xml_client.is_authenticated:
        logger.error("XML –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return BatchFetchResponse(
            results=[],
            total=0,
            success=0,
            failed=len(request.battle_ids),
            timeout=0
        )
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline –º–µ—Ç–æ–¥
        result = await asyncio.to_thread(
            xml_client.get_battles_batch,
            request.battle_ids,
            output_dir="/srv/btl_mirror"
        )
        
        logger.info(f"‚úÖ Pipeline —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['success']} —É—Å–ø–µ—à–Ω–æ, {result['failed']} –æ—à–∏–±–æ–∫")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—è
        results = []
        saved_files = result.get("files", [])
        
        for i, battle_id in enumerate(request.battle_ids):
            if i < result["success"]:
                results.append(FetchResponse(
                    battle_id=battle_id,
                    status="success",
                    error=None,
                    size_bytes=None,
                    uploaded_to_mother=False  # –û–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ upload
                ))
            else:
                results.append(FetchResponse(
                    battle_id=battle_id,
                    status="failed",
                    error="–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",
                    size_bytes=None,
                    uploaded_to_mother=False
                ))
        
        # Upload –≤ mother –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        uploaded_count = 0
        if request.upload_to_mother and saved_files:
            import httpx
            async with httpx.AsyncClient(timeout=30.0) as http_client:
                for file_path in saved_files:
                    try:
                        battle_id = int(os.path.basename(file_path).replace('.tzb', ''))
                        
                        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        with open(file_path, 'r', encoding='utf-8') as f:
                            xml_content = f.read()
                        
                        response = await http_client.post(
                            f"{API_MOTHER_URL}/upload/{battle_id}",
                            content=xml_content,
                            headers={"Content-Type": "application/xml"}
                        )
                        
                        if response.status_code == 200:
                            uploaded_count += 1
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            for res in results:
                                if res.battle_id == battle_id:
                                    res.uploaded_to_mother = True
                                    break
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ upload –≤ mother –¥–ª—è {file_path}: {e}")
        
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ mother: {uploaded_count}/{result['success']}")
        
        # –ù–ï –ó–ê–ö–†–´–í–ê–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï! –ö–∞–∫ –≤ pipeline.py - –¥–µ—Ä–∂–∏–º —Å–æ–∫–µ—Ç –∂–∏–≤—ã–º
        # –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏—Ç—å –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        
        return BatchFetchResponse(
            results=results,
            total=len(request.battle_ids),
            success=result["success"],
            failed=result["failed"],
            timeout=0
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ pipeline batch: {e}")
        import traceback
        traceback.print_exc()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞–∫ failed
        results = [
            FetchResponse(
                battle_id=bid,
                status="failed", 
                error=str(e),
                size_bytes=None,
                uploaded_to_mother=False
            ) for bid in request.battle_ids
        ]
        
        return BatchFetchResponse(
            results=results,
            total=len(request.battle_ids),
            success=0,
            failed=len(request.battle_ids),
            timeout=0
        )


if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "9000"))
    uvicorn.run(app, host="0.0.0.0", port=port)
