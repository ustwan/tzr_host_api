"""
XML Worker - –≠–ü–ò–ó–û–î–ò–ß–ï–°–ö–û–ï —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (context manager)
–û—Ç–∫—Ä—ã—Ç—å ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è ‚Üí –∑–∞–±—Ä–∞—Ç—å –±–∞—Ç—á ‚Üí –∑–∞–∫—Ä—ã—Ç—å
"""
import os
import socket
import time
import logging
import re
from typing import Optional, List
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import httpx

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s: %(message)s'
)
logger = logging.getLogger("app.main")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ ENV
WORKER_ID = os.getenv("WORKER_ID", "unknown")
LOGIN_NAME = os.getenv("LOGIN_NAME", "")
LOGIN_KEY = os.getenv("LOGIN_KEY", "")
API_MOTHER_URL = os.getenv("API_MOTHER_URL", "http://host-api-service-api_mother-1:8083")

if not LOGIN_NAME or not LOGIN_KEY:
    raise ValueError("LOGIN_NAME –∏ LOGIN_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

logger.info(f"XML Worker {WORKER_ID} –∑–∞–ø—É—â–µ–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {LOGIN_NAME}")

app = FastAPI(title=f"XML Worker {WORKER_ID}")


class GameConn:
    """–≠–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º: –æ—Ç–∫—Ä—ã—Ç—å ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è ‚Üí –∑–∞–±—Ä–∞—Ç—å –±–∞—Ç—á ‚Üí –∑–∞–∫—Ä—ã—Ç—å."""
    
    def __init__(self, host: str, port: int, login: str, key: str):
        self.host = host
        self.port = int(port)
        self.login = login
        self.key = key
        self.sock: Optional[socket.socket] = None

    def __enter__(self):
        """Context manager: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è."""
        self._connect_and_auth()
        return self

    def __exit__(self, exc_type, exc, tb):
        """Context manager: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        self._safe_close()

    def _safe_close(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∫–µ—Ç–∞."""
        try:
            if self.sock:
                self.sock.close()
                logger.debug("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–∫–µ—Ç–∞: {e}")
        finally:
            self.sock = None

    def _connect_and_auth(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."""
        try:
            self.sock = socket.create_connection((self.host, self.port), timeout=10)
            # –£—Å–∫–æ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ç –º—ë—Ä—Ç–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try:
                self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
            except Exception:
                pass
            
            # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome = self.sock.recv(8192)
            logger.debug(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {welcome[:50]}...")
            
            # –õ–æ–≥–∏–Ω
            login_xml = f'<LOGIN v3="10.20.30.40" lang="ru" v2="4875537" v="108" p="{self.key}" l="{self.login}" />\x00'
            self.sock.sendall(login_xml.encode('utf-8'))
            login_response = self.sock.recv(8192)
            
            if b'<ERROR' in login_response:
                raise ConnectionError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response[:100]}")
            
            logger.debug(f"LOGIN OK: {login_response[:50]}...")
            
            # GETME –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
            self.sock.sendall(b"<GETME />\x00")
            time.sleep(0.2)
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ—Ç —Ö–≤–æ—Å—Ç–æ–≤ (MYPARAM –∏ –ø—Ä–æ—á–µ–≥–æ)
            self._drain(0.3)
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {self.host}:{self.port} –∫–∞–∫ {self.login}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self._safe_close()
            raise

    def _drain(self, timeout: float = 0.3):
        """–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        if not self.sock:
            return
        self.sock.settimeout(timeout)
        drained = 0
        try:
            while True:
                chunk = self.sock.recv(65536)
                if not chunk:
                    break
                drained += len(chunk)
        except socket.timeout:
            pass
        finally:
            self.sock.settimeout(5)
        if drained > 0:
            logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {drained} –±–∞–π—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞")

    def fetch_one_blook(self, battle_id: int, hard_timeout: float = 20.0) -> Optional[str]:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –±–æ–π –∏ —á–∏—Ç–∞–µ—Ç –¥–æ </BLOOK>.
        
        Args:
            battle_id: ID –±–æ—è
            hard_timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            XML —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.sock:
            logger.error(f"‚ùå {battle_id}: —Å–æ–∫–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
            
        try:
            # –ó–∞–ø—Ä–æ—Å –±–æ—è
            self.sock.sendall(f'<POST t="//blook {battle_id}" />\x00'.encode('utf-8'))
            time.sleep(0.05)
            self.sock.sendall(b"<GETMYBATTLE />\x00")
        except OSError as e:
            logger.error(f"‚ùå {battle_id}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return None

        # –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ </BLOOK>
        buf = b""
        self.sock.settimeout(1.0)
        start_time = time.time()
        
        while time.time() - start_time < hard_timeout:
            try:
                chunk = self.sock.recv(65536)
                if not chunk:
                    # –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    logger.warning(f"‚ö†Ô∏è {battle_id}: —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    return None
                buf += chunk
                if b"</BLOOK>" in buf:
                    break
                if b"<ERROR" in buf:
                    error_text = buf.decode('utf-8', errors='replace')[:200]
                    logger.warning(f"‚ö†Ô∏è {battle_id}: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ERROR: {error_text}")
                    return None
            except socket.timeout:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö hard_timeout
                pass

        if b"</BLOOK>" not in buf:
            logger.warning(f"‚ö†Ô∏è {battle_id}: —Ç–∞–π–º–∞—É—Ç {hard_timeout}—Å (–ø–æ–ª—É—á–µ–Ω–æ {len(buf)} –±–∞–π—Ç)")
            return None

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞
        decoded = buf.decode('utf-8', errors='replace')
        decoded = decoded.replace('\x00', '').replace('\x1f', '')
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ BLOOK
        start = decoded.find("<BLOOK>")
        end = decoded.find("</BLOOK>", start)
        if start == -1 or end == -1:
            logger.warning(f"‚ö†Ô∏è {battle_id}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XML (–Ω–µ—Ç BLOOK —Ç–µ–≥–æ–≤)")
            return None
        end += len("</BLOOK>")
        blook_xml = decoded[start:end]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ–π
        match = re.search(r'battleid="(\d+)"', blook_xml)
        if match:
            received_id = int(match.group(1))
            if received_id != battle_id:
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å–∏–ª–∏ {battle_id}, –ø–æ–ª—É—á–∏–ª–∏ {received_id}")
        
        return blook_xml


class FetchResponse(BaseModel):
    battle_id: int
    status: str
    error: Optional[str] = None
    size_bytes: Optional[int] = None
    uploaded_to_mother: bool = False


class BatchFetchRequest(BaseModel):
    battle_ids: List[int]
    semaphore_limit: int = 1
    delay_seconds: float = 0.5
    upload_to_mother: bool = True


class BatchFetchResponse(BaseModel):
    results: List[FetchResponse]
    total: int
    success: int
    failed: int
    timeout: int


@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {
        "status": "healthy",
        "worker_id": WORKER_ID,
        "login": LOGIN_NAME
    }


@app.post("/fetch_batch", response_model=BatchFetchResponse)
async def fetch_battle_batch(request: BatchFetchRequest):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–∞—á–∫—É –±–æ—ë–≤ —Å –≠–ü–ò–ó–û–î–ò–ß–ï–°–ö–ò–ú —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.
    –û–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –±–∞—Ç—á: –æ—Ç–∫—Ä—ã—Ç—å ‚Üí –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ ‚Üí –∑–∞–∫—Ä—ã—Ç—å.
    """
    host = "185.92.72.18"
    port = 5190
    output_dir = "/srv/btl/raw"
    os.makedirs(output_dir, exist_ok=True)
    
    results = []
    saved_files = []
    success_count = 0
    failed_count = 0
    timeout_count = 0
    
    logger.info(f"üì¶ Batch: {len(request.battle_ids)} –±–æ–µ–≤ (—ç–ø–∏–∑–æ–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)")
    
    try:
        # –û–î–ù–û —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –±–∞—Ç—á (–∂–∏–≤—ë—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞ –∏–¥—ë—Ç –±–∞—Ç—á)
        with GameConn(host, port, LOGIN_NAME, LOGIN_KEY) as gc:
            for battle_id in request.battle_ids:
                # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
                xml = gc.fetch_one_blook(battle_id, hard_timeout=20.0)
                
                # –†–µ—Ç—Ä–∞–π —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –æ–±—Ä—ã–≤–µ
                if xml is None:
                    logger.warning(f"üîÑ {battle_id}: —Ä–µ—Ç—Ä–∞–π —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
                    gc._safe_close()
                    try:
                        gc._connect_and_auth()
                        xml = gc.fetch_one_blook(battle_id, hard_timeout=20.0)
                    except Exception as e:
                        logger.error(f"‚ùå {battle_id}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                if xml is None:
                    results.append(FetchResponse(
                        battle_id=battle_id,
                        status="failed",
                        error="connection closed or timeout after retry"
                    ))
                    failed_count += 1
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    shard = battle_id // 50000
                    shard_dir = os.path.join(output_dir, str(shard))
                    os.makedirs(shard_dir, exist_ok=True)
                    file_path = os.path.join(shard_dir, f"{battle_id}.tzb")
                    
                    with open(file_path, "w", encoding="utf-8") as f:
                        f.write(xml)
                    
                    size_kb = len(xml) / 1024
                    logger.info(f"‚úì {battle_id}.tzb ({size_kb:.1f} KB)")
                    
                    results.append(FetchResponse(
                        battle_id=battle_id,
                        status="success",
                        size_bytes=len(xml)
                    ))
                    saved_files.append(file_path)
                    success_count += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–æ—è–º–∏
                if request.delay_seconds > 0:
                    time.sleep(request.delay_seconds)
        
        # ‚Üê –ó–¥–µ—Å—å —Å–æ–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç (–≤—ã—à–ª–∏ –∏–∑ with)
        
    except Exception as e:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–æ–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
        logger.error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞—Ç—á–∞: {e}")
        for bid in request.battle_ids[len(results):]:
            results.append(FetchResponse(
                battle_id=bid,
                status="failed",
                error=f"batch error: {str(e)[:100]}"
            ))
            failed_count += 1
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫, {timeout_count} —Ç–∞–π–º–∞—É—Ç–æ–≤")
    
    # Upload –≤ mother (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    uploaded_count = 0
    if request.upload_to_mother and saved_files:
        async with httpx.AsyncClient(timeout=30.0) as http_client:
            for file_path in saved_files:
                try:
                    battle_id = int(os.path.basename(file_path).split(".")[0])
                    
                    with open(file_path, "r", encoding="utf-8") as f:
                        xml_content = f.read()
                    
                    response = await http_client.post(
                        f"{API_MOTHER_URL}/upload/{battle_id}",
                        content=xml_content,
                        headers={"Content-Type": "application/xml"}
                    )
                    
                    if response.status_code == 200:
                        uploaded_count += 1
                        for res in results:
                            if res.battle_id == battle_id:
                                res.uploaded_to_mother = True
                                break
                except Exception as e:
                    logger.warning(f"upload failed for {file_path}: {e}")
        
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ mother: {uploaded_count}/{success_count}")
    
    return BatchFetchResponse(
        results=results,
        total=len(request.battle_ids),
        success=success_count,
        failed=failed_count,
        timeout=timeout_count
    )


if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "9000"))
    uvicorn.run(app, host="0.0.0.0", port=port)
